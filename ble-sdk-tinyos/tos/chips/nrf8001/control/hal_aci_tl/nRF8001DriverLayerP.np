/* Copyright (c) 2014, Nordic Semiconductor ASA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @file
@brief Implementation of the ACI transport layer module
*/

//TODO - Fix the SPI.h include, this should be needed anymore
#include <SPI.h>


#include "hal_platform.h"
#include "hal_aci_tl.h"
#include "aci_queue.h"
#include <avr/sleep.h>

//TODO - check spi direction, might need to do something to se that in this code

//Begin nes c stuff

module nRF8001DriverLayerP{
  provides 
  {
    interface hal_aci_tl;
    interface Init as SoftwareInit @exactlyonce();
    interface aci_setup;
  }

  uses
  {
    interface Resource as SpiResource;
    interface BusyWait<TMicro, uint16_t>; 
    
    interface FastSpiByte;
    interface aci_queue;
    interface lib_aci;

    interface GpioInterrupt as InterruptRDYN;

    interface GeneralIO as ACTIVE;
    interface GeneralIO as RESET;
    interface GeneralI0 as REQN;


    interface lib_aci;


  }
} 

implementation
{
  static struct aci_state_t aci_state;

  static bool           aci_debug_print = false;

  aci_queue_t    aci_tx_q;
  aci_queue_t    aci_rx_q;

  static aci_pins_t  *a_pins_local_ptr;

  // aci_struct that will contain 
  // total initial credits
  // current credit
  // current state of the aci (setup/standby/active/sleep)
  // open remote pipe pending
  // close remote pipe pending
  // Current pipe available bitmap
  // Current pipe closed bitmap
  // Current connection interval, slave latency and link supervision timeout
  // Current State of the the GATT client (Service Discovery status)

  /*-----------------INIT--------------*/
  command error_t SoftwareInit.init()
  {
        /**
    Point ACI data structures to the the setup data that the nRFgo studio generated for the nRF8001
    */
    if (NULL != services_pipe_type_mapping)
    {
      aci_state.aci_setup_info.services_pipe_type_mapping = &services_pipe_type_mapping[0];
    }
    else
    {
      aci_state.aci_setup_info.services_pipe_type_mapping = NULL;
    }
    aci_state.aci_setup_info.number_of_pipes    = NUMBER_OF_PIPES;
    aci_state.aci_setup_info.setup_msgs         = setup_msgs;
    aci_state.aci_setup_info.num_setup_msgs     = NB_SETUP_MESSAGES;

    /*
    Tell the ACI library, the MCU to nRF8001 pin connections.
    The Active pin is optional and can be marked UNUSED
    */
    //aci_state.aci_pins.board_name = BOARD_DEFAULT; //See board.h for details REDBEARLAB_SHIELD_V1_1 or BOARD_DEFAULT
    //aci_state.aci_pins.reqn_pin   = REQN;// Set in HplNRF8001PinC.nc
    //aci_state.aci_pins.rdyn_pin   = InterruptRDYNC; //Set in HplNRF8001PinC.nc
    //aci_state.aci_pins.mosi_pin   = MOSI;
    //aci_state.aci_pins.miso_pin   = MISO;
    //aci_state.aci_pins.sck_pin    = SCK;

    //aci_state.aci_pins.spi_clock_divider      = SPI_CLOCK_DIV8;//SPI_CLOCK_DIV8  = 2MHz SPI speed
                                                               //SPI_CLOCK_DIV16 = 1MHz SPI speed
    
    //aci_state.aci_pins.reset_pin              = 4; //4 for Nordic board, UNUSED for REDBEARLAB_SHIELD_V1_1
    //aci_state.aci_pins.active_pin             = UNUSED;
    //aci_state.aci_pins.optional_chip_sel_pin  = UNUSED;

    //aci_state.aci_pins.interface_is_interrupt = false; //Interrupts still not available in Chipkit
    //aci_state.aci_pins.interrupt_number       = 1;

    //We reset the nRF8001 here by toggling the RESET line connected to the nRF8001
    //If the RESET line is not available we call the ACI Radio Reset to soft reset the nRF8001
    //then we initialize the data structures required to setup the nRF8001
    //The second parameter is for turning debug printing on for the ACI Commands and Events so they be printed on the Serial

    //lib_aci.init(&aci_state, false);  //the useful parts of this function are being place below

    uint8_t i;

    for (i = 0; i < PIPES_ARRAY_SIZE; i++)
    {
      aci_state->pipes_open_bitmap[i]          = 0;
      aci_state->pipes_closed_bitmap[i]        = 0;
      aci_cmd_params_open_adv_pipe.pipes[i]   = 0;
    }

    is_request_operation_pending     = false;
    is_indicate_operation_pending    = false; 
    is_open_remote_pipe_pending      = false;
    is_close_remote_pipe_pending     = false;

    request_operation_pipe           = 0;
    indicate_operation_pipe          = 0;
        
    p_services_pipe_type_map = aci_state->aci_setup_info.services_pipe_type_mapping;
    
    p_setup_msgs             = aci_state->aci_setup_info.setup_msgs;

    //aci_debug_print = debug; //no idea what this does, may arduino specfic

    //set pin directories
    call ACTIVE.makeOutput();
    call REQN.makeOutput();
    call RESET.makeOuput();

    call InterruptRDYN.disable(); //why would we disable the interrupt at start up?

    //This might not work, need to go look at aci queue init
    aci_queue.init(&aci_tx_q);
    aci_queue.init(&aci_rx_q);

    //TODO low priority create a non blocking timer that will lower reset pin when fired and maybe a ready signal to the aci state var that will go high when the reset time finishes 
    call RESET.set() ;
    call BusyWait.wait(50); //.05ms reset time, 200ns is required 
    call RESET.clr();



    //TODO might need to set nrf8001 to known state right here?
    //digitalWrite(a_pins->miso_pin, 0);
    //digitalWrite(a_pins->mosi_pin, 0);
    //digitalWrite(a_pins->reqn_pin, 1);
    //digitalWrite(a_pins->sck_pin,  0);

    //hal_aci_tl.init(&aci_stat->aci_pins, debug);
    
    lib_aci_board_init(aci_stat);

    do_aci_setup(&aci_state); //added this line on 5/20

    return call SpiResource.request();
  }


  //TODO Deal with this line
  extern hal_aci_data_t msg_to_send;

  /**************************************************************************                */
  /* Utility function to fill the the ACI command queue                                      */
  /* aci_stat               Pointer to the ACI state                                         */
  /* num_cmd_offset(in/out) Offset in the Setup message array to start from                  */
  /*                        offset is updated to the new index after the queue is filled     */
  /*                        or the last message us placed in the queue                       */
  /* Returns                true if at least one message was transferred                     */
  /***************************************************************************/
  static bool aci_setup_fill(aci_state_t *aci_stat, uint8_t *num_cmd_offset)
  {
    bool ret_val = false;
    
    while (*num_cmd_offset < aci_stat->aci_setup_info.num_setup_msgs)
    {
    //Board dependent defines
    #if defined (__AVR__)
      //For Arduino copy the setup ACI message from Flash to RAM.
      memcpy_P(&msg_to_send, &(aci_stat->aci_setup_info.setup_msgs[*num_cmd_offset]), 
            pgm_read_byte_near(&(aci_stat->aci_setup_info.setup_msgs[*num_cmd_offset].buffer[0]))+2); 
    #elif defined(__PIC32MX__)
      //In ChipKit we store the setup messages in RAM
      //Add 2 bytes to the length byte for status byte, length for the total number of bytes
      memcpy(&msg_to_send, &(aci_stat->aci_setup_info.setup_msgs[*num_cmd_offset]), 
            (aci_stat->aci_setup_info.setup_msgs[*num_cmd_offset].buffer[0]+2)); 
    #endif

      //Put the Setup ACI message in the command queue
      if (!hal_aci_tl_send(&msg_to_send))
      {
        //ACI Command Queue is full
        // *num_cmd_offset is now pointing to the index of the Setup command that did not get sent
        return ret_val;
      }
     
      ret_val = true;
      
      (*num_cmd_offset)++;
    }
    
    return ret_val;
  }

  command uint8_t aci_setup.do_aci_setup(aci_state_t *aci_stat)
  {
    uint8_t setup_offset         = 0;
    uint32_t i                   = 0x0000;
    aci_evt_t * aci_evt          = NULL;
    aci_status_code_t cmd_status = ACI_STATUS_ERROR_CRC_MISMATCH;
    
    /*
    We are using the same buffer since we are copying the contents of the buffer 
    when queuing and immediately processing the buffer when receiving
    */
    hal_aci_evt_t  *aci_data = (hal_aci_evt_t *)&msg_to_send;
    
    /* Messages in the outgoing queue must be handled before the Setup routine can run.
     * If it is non-empty we return. The user should then process the messages before calling
     * do_aci_setup() again.
     */
    if (!lib_aci_command_queue_empty())
    {
      return SETUP_FAIL_COMMAND_QUEUE_NOT_EMPTY;
    }
    
    /* If there are events pending from the device that are not relevant to setup, we return false
     * so that the user can handle them. At this point we don't care what the event is,
     * as any event is an error.
     */
    if (lib_aci_event_peek(aci_data))
    {
      return SETUP_FAIL_EVENT_QUEUE_NOT_EMPTY;
    }
    
    /* Fill the ACI command queue with as many Setup messages as it will hold. */
    aci_setup_fill(aci_stat, &setup_offset);
    
    while (cmd_status != ACI_STATUS_TRANSACTION_COMPLETE)
    {
      /* This counter is used to ensure that this function does not loop forever. When the device
       * returns a valid response, we reset the counter.
       */
      if (i++ > 0xFFFFE)
      {
        return SETUP_FAIL_TIMEOUT;  
      }
      
      if (lib_aci_event_peek(aci_data))
      {
        aci_evt = &(aci_data->evt);
        
        if (ACI_EVT_CMD_RSP != aci_evt->evt_opcode)
        {
          //Receiving something other than a Command Response Event is an error.
          return SETUP_FAIL_NOT_COMMAND_RESPONSE;
        }
        
        cmd_status = (aci_status_code_t) aci_evt->params.cmd_rsp.cmd_status;
        switch (cmd_status)
        {
          case ACI_STATUS_TRANSACTION_CONTINUE:
            //As the device is responding, reset guard counter
            i = 0;
            
            /* As the device has processed the Setup messages we put in the command queue earlier,
             * we can proceed to fill the queue with new messages
             */
            aci_setup_fill(aci_stat, &setup_offset);
            break;
          
          case ACI_STATUS_TRANSACTION_COMPLETE:
            //Break out of the while loop when this status code appears
            break;
          
          default:
            //An event with any other status code should be handled by the application
            return SETUP_FAIL_NOT_SETUP_EVENT;
        }
        
        /* If we haven't returned at this point, the event was either ACI_STATUS_TRANSACTION_CONTINUE
         * or ACI_STATUS_TRANSACTION_COMPLETE. We don't need the event itself, so we simply
         * remove it from the queue.
         */
         lib_aci_event_get (aci_stat, aci_data);
      }
    }
    
    return SETUP_SUCCESS;
  }
}
  void m_aci_data_print(hal_aci_data_t *p_data)
  {
    const uint8_t length = p_data->buffer[0];
    uint8_t i;
    Serial.print(length, DEC);
    Serial.print(" :");
    for (i=0; i<=length; i++)
    {
      Serial.print(p_data->buffer[i], HEX);
      Serial.print(F(", "));
    }
    Serial.println(F(""));
  }

    /*
    Interrupt service routine called when the RDYN line goes low. Runs the SPI transfer.
  */
  static void m_aci_isr(void)
  {
    hal_aci_data_t data_to_send;
    hal_aci_data_t received_data;

    // Receive from queue
    if (!aci_queue.dequeue_from_isr(&aci_tx_q, &data_to_send))
    {
      /* queue was empty, nothing to send */
      data_to_send.status_byte = 0;
      data_to_send.buffer[0] = 0;
    }

    // Receive and/or transmit data
    m_aci_spi_transfer(&data_to_send, &received_data);

    if (!aci_queue.is_full_from_isr(&aci_rx_q) && !aci_queue.is_empty_from_isr(&aci_tx_q))
    {
      m_aci_reqn_enable();
    }

    // Check if we received data
    if (received_data.buffer[0] > 0)
    {
      if (!aci_queue.enqueue_from_isr(&aci_rx_q, &received_data))
      {
        /* Receive Buffer full.
           Should never happen.
           Spin in a while loop.
        */
        while(1);
      }

      // Disable ready line interrupt until we have room to store incoming messages
      if (aci_queue.is_full_from_isr(&aci_rx_q))
      {
        detachInterrupt(a_pins_local_ptr->interrupt_number);
      }
    }

    return;
  }

  /*
    Checks the RDYN line and runs the SPI transfer if required.
  */
  static void m_aci_event_check(void)
  {
    hal_aci_data_t data_to_send;
    hal_aci_data_t received_data;

    // No room to store incoming messages
    if (aci_queue_is_full(&aci_rx_q))
    {
      return;
    }

    // If the ready line is disabled and we have pending messages outgoing we enable the request line
    if (HIGH == digitalRead(a_pins_local_ptr->rdyn_pin))
    {
      if (!aci_queue_is_empty(&aci_tx_q))
      {
        m_aci_reqn_enable();
      }

      return;
    }

    // Receive from queue
    if (!aci_queue_dequeue(&aci_tx_q, &data_to_send))
    {
      /* queue was empty, nothing to send */
      data_to_send.status_byte = 0;
      data_to_send.buffer[0] = 0;
    }

    // Receive and/or transmit data
    m_aci_spi_transfer(&data_to_send, &received_data);

    /* If there are messages to transmit, and we can store the reply, we request a new transfer */
    if (!aci_queue_is_full(&aci_rx_q) && !aci_queue_is_empty(&aci_tx_q))
    {
      m_aci_reqn_enable();
    }

    // Check if we received data
    if (received_data.buffer[0] > 0)
    {
      if (!aci_queue_enqueue(&aci_rx_q, &received_data))
      {
        /* Receive Buffer full.
           Should never happen.
           Spin in a while loop.
        */
        while(1);
      }
    }

    return;
  }


  /** @brief Point the low level library at the ACI pins specified
   *  @details
   *  The ACI pins are specified in the application and a pointer is made available for
   *  the low level library to use
   */
  static void m_aci_pins_set(aci_pins_t *a_pins_ptr)
  {
    a_pins_local_ptr = a_pins_ptr;
  }

  static inline void m_aci_reqn_disable (void)
  {
    digitalWrite(a_pins_local_ptr->reqn_pin, 1);
  }

  static inline void m_aci_reqn_enable (void)
  {
    digitalWrite(a_pins_local_ptr->reqn_pin, 0);
  }

  static void m_aci_q_flush(void)
  {
    noInterrupts();
    /* re-initialize aci cmd queue and aci event queue to flush them*/
    aci_queue_init(&aci_tx_q);
    aci_queue_init(&aci_rx_q);
    interrupts();
  }

  static bool m_aci_spi_transfer(hal_aci_data_t * data_to_send, hal_aci_data_t * received_data)
  {
    uint8_t byte_cnt;
    uint8_t byte_sent_cnt;
    uint8_t max_bytes;

    m_aci_reqn_enable();

    // Send length, receive header
    byte_sent_cnt = 0;
    received_data->status_byte = spi_readwrite(data_to_send->buffer[byte_sent_cnt++]);
    // Send first byte, receive length from slave
    received_data->buffer[0] = spi_readwrite(data_to_send->buffer[byte_sent_cnt++]);
    if (0 == data_to_send->buffer[0])
    {
      max_bytes = received_data->buffer[0];
    }
    else
    {
      // Set the maximum to the biggest size. One command byte is already sent
      max_bytes = (received_data->buffer[0] > (data_to_send->buffer[0] - 1))
                                            ? received_data->buffer[0]
                                            : (data_to_send->buffer[0] - 1);
    }

    if (max_bytes > HAL_ACI_MAX_LENGTH)
    {
      max_bytes = HAL_ACI_MAX_LENGTH;
    }

    // Transmit/receive the rest of the packet
    for (byte_cnt = 0; byte_cnt < max_bytes; byte_cnt++)
    {
      received_data->buffer[byte_cnt+1] =  spi_readwrite(data_to_send->buffer[byte_sent_cnt++]);
    }

    // RDYN should follow the REQN line in approx 100ns
    m_aci_reqn_disable();

    return (max_bytes > 0);
  }
  
  command error_t hal_aci_tl.debug_print(bool enable)
  {
    aci_debug_print = enable;
  }

  inline void resetRadio(){
    //TODO
  }
  //no longer used to toggle reset

/*
  command error_t hal_aci_tl.pin_reset()
  {
      if (UNUSED != a_pins_local_ptr->reset_pin)
      {
          pinMode(a_pins_local_ptr->reset_pin, OUTPUT);

          if ((REDBEARLAB_SHIELD_V1_1     == a_pins_local_ptr->board_name) ||
              (REDBEARLAB_SHIELD_V2012_07 == a_pins_local_ptr->board_name))
          {
              //The reset for the Redbearlab v1.1 and v2012.07 boards are inverted and has a Power On Reset
              //circuit that takes about 100ms to trigger the reset
              digitalWrite(a_pins_local_ptr->reset_pin, 1);
              delay(100);
              digitalWrite(a_pins_local_ptr->reset_pin, 0);
          }
          else
          {
              digitalWrite(a_pins_local_ptr->reset_pin, 1);
              digitalWrite(a_pins_local_ptr->reset_pin, 0);
              digitalWrite(a_pins_local_ptr->reset_pin, 1);
          }
      }
  }
*/ 
  bool hal_aci_tl.event_peek(hal_aci_data_t *p_aci_data)
  {
    if (!a_pins_local_ptr->interface_is_interrupt)
    {
      m_aci_event_check();
    }

    if (aci_queue_peek(&aci_rx_q, p_aci_data))
    {
      return SUCCESS;
    }

    return FAILURE;
  }

  bool hal_aci_tl.event_get(hal_aci_data_t *p_aci_data)
  {
    bool was_full;

    if (!a_pins_local_ptr->interface_is_interrupt && !aci_queue_is_full(&aci_rx_q))
    {
      m_aci_event_check();
    }

    was_full = aci_queue_is_full(&aci_rx_q);

    if (aci_queue_dequeue(&aci_rx_q, p_aci_data))
    {
      if (aci_debug_print)
      {
        Serial.print(" E");
        m_aci_data_print(p_aci_data);
      }

      if (was_full && a_pins_local_ptr->interface_is_interrupt)
      {
        /* Enable RDY line interrupt again */
        attachInterrupt(a_pins_local_ptr->interrupt_number, m_aci_isr, LOW);
      }

      /* Attempt to pull REQN LOW since we've made room for new messages */
      if (!aci_queue_is_full(&aci_rx_q) && !aci_queue_is_empty(&aci_tx_q))
      {
        m_aci_reqn_enable();
      }

      return SUCCESS;
    }

    return FAILURE;
  }

//this function has been implemented in softwareInit.init
 /* command error_t hal_aci_tl.init(aci_pins_t *a_pins, bool debug)
  {


//Ardiuno verson of this function
    /* Needs to be called as the first thing for proper intialization*/
    //m_aci_pins_set(a_pins);

    /*
    /* Initialize the ACI Command queue. This must be called after the delay above. 
    aci_queue_init(&aci_tx_q);
    aci_queue_init(&aci_rx_q);

    //Configure the IO lines
    pinMode(a_pins->rdyn_pin,   INPUT_PULLUP);
    pinMode(a_pins->reqn_pin,   OUTPUT);

    if (UNUSED != a_pins->active_pin)
    {
      pinMode(a_pins->active_pin, INPUT);
    }
    /* Pin reset the nRF8001, required when the nRF8001 setup is being changed 
    hal_aci_tl_pin_reset();

    /* Set the nRF8001 to a known state as required by the datasheet
    digitalWrite(a_pins->miso_pin, 0);
    digitalWrite(a_pins->mosi_pin, 0);
    digitalWrite(a_pins->reqn_pin, 1);
    digitalWrite(a_pins->sck_pin,  0);


    delay(30); //Wait for the nRF8001 to get hold of its lines - the lines float for a few ms after the reset

    /* Attach the interrupt to the RDYN line as requested by the caller 
    if (a_pins->interface_is_interrupt)
    {
      // We use the LOW level of the RDYN line as the atmega328 can wakeup from sleep only on LOW
      attachInterrupt(a_pins->interrupt_number, m_aci_isr, LOW);
    }
    return SUCCESS
  }*/

  command error_t hal_aci_tl.send(hal_aci_data_t *p_aci_cmd)
  {
    const uint8_t length = p_aci_cmd->buffer[0];
    bool ret_val = false;

    if (length > HAL_ACI_MAX_LENGTH)
    {
      return false;
    }

    ret_val = aci_queue_enqueue(&aci_tx_q, p_aci_cmd);
    if (ret_val)
    {
      if(!aci_queue_is_full(&aci_rx_q))
      {
        // Lower the REQN only when successfully enqueued
        m_aci_reqn_enable();
      }

      if (aci_debug_print)
      {
        Serial.print("C"); //ACI Command
        m_aci_data_print(p_aci_cmd);
      }
    }

    if (ret_val == TRUE)
      return SUCCESS;
    else
      return FAILURE;

    //return ret_val;
  }

  //TODO

  static uint8_t spi_readwrite(const uint8_t aci_byte)
  {
    //Board dependent defines
  #if defined (__AVR__)
      //For Arduino the transmission does not have to be reversed
      return SPI.transfer(aci_byte);
  #elif defined(__PIC32MX__)
      //For ChipKit the transmission has to be reversed
      uint8_t tmp_bits;
      tmp_bits = SPI.transfer(REVERSE_BITS(aci_byte));
    return REVERSE_BITS(tmp_bits);
  #endif
  }

  command error_t hal_aci_tl.rx_q_empty (void)
  {
    return aci_queue_is_empty(&aci_rx_q);
  }

  command error_t hal_aci_tl.rx_q_full (void)
  {
    return aci_queue_is_full(&aci_rx_q);
  }

  command error_t hal_aci_tl.tx_q_empty (void)
  {
    return aci_queue_is_empty(&aci_tx_q);
  }

  command error_t hal_aci_tl.tx_q_full (void)
  {
    return aci_queue_is_full(&aci_tx_q);
  }

  command error_t hal_aci_tl.q_flush (void)
  {
    m_aci_q_flush();
  }


}

//TODO:Deal with this

static void m_aci_data_print(hal_aci_data_t *p_data);
static void m_aci_event_check(void);
static void m_aci_isr(void);
static void m_aci_pins_set(aci_pins_t *a_pins_ptr);
static inline void m_aci_reqn_disable (void);
static inline void m_aci_reqn_enable (void);
static void m_aci_q_flush(void);
static bool m_aci_spi_transfer(hal_aci_data_t * data_to_send, hal_aci_data_t * received_data);

static uint8_t        spi_readwrite(uint8_t aci_byte);











